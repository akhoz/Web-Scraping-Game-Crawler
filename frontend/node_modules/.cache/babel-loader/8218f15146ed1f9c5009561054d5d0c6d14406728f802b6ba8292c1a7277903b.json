{"ast":null,"code":"import '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { dialogContentProps } from './dialog-content.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props/runtime.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { isBoolean } from '../../../utils/types.mjs';\nconst dialogProps = buildProps({\n  ...dialogContentProps,\n  appendToBody: Boolean,\n  beforeClose: {\n    type: definePropType(Function)\n  },\n  destroyOnClose: Boolean,\n  closeOnClickModal: {\n    type: Boolean,\n    default: true\n  },\n  closeOnPressEscape: {\n    type: Boolean,\n    default: true\n  },\n  lockScroll: {\n    type: Boolean,\n    default: true\n  },\n  modal: {\n    type: Boolean,\n    default: true\n  },\n  openDelay: {\n    type: Number,\n    default: 0\n  },\n  closeDelay: {\n    type: Number,\n    default: 0\n  },\n  top: {\n    type: String\n  },\n  modelValue: Boolean,\n  modalClass: String,\n  width: {\n    type: [String, Number]\n  },\n  zIndex: {\n    type: Number\n  },\n  trapFocus: {\n    type: Boolean,\n    default: false\n  },\n  headerAriaLevel: {\n    type: String,\n    default: \"2\"\n  }\n});\nconst dialogEmits = {\n  open: () => true,\n  opened: () => true,\n  close: () => true,\n  closed: () => true,\n  [UPDATE_MODEL_EVENT]: value => isBoolean(value),\n  openAutoFocus: () => true,\n  closeAutoFocus: () => true\n};\nexport { dialogEmits, dialogProps };","map":{"version":3,"names":["dialogProps","buildProps","dialogContentProps","appendToBody","Boolean","beforeClose","type","definePropType","Function","destroyOnClose","closeOnClickModal","default","closeOnPressEscape","lockScroll","modal","openDelay","Number","closeDelay","top","String","modelValue","modalClass","width","zIndex","trapFocus","headerAriaLevel","dialogEmits","open","opened","close","closed","UPDATE_MODEL_EVENT","value","isBoolean","openAutoFocus","closeAutoFocus"],"sources":["../../../../../../packages/components/dialog/src/dialog.ts"],"sourcesContent":["import { buildProps, definePropType, isBoolean } from '@element-plus/utils'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { dialogContentProps } from './dialog-content'\n\nimport type { ExtractPropTypes } from 'vue'\n\ntype DoneFn = (cancel?: boolean) => void\nexport type DialogBeforeCloseFn = (done: DoneFn) => void\n\nexport const dialogProps = buildProps({\n  ...dialogContentProps,\n  /**\n   * @description whether to append Dialog itself to body. A nested Dialog should have this attribute set to `true`\n   */\n  appendToBody: Boolean,\n  /**\n   * @description callback before Dialog closes, and it will prevent Dialog from closing, use done to close the dialog\n   */\n  beforeClose: {\n    type: definePropType<DialogBeforeCloseFn>(Function),\n  },\n  /**\n   * @description destroy elements in Dialog when closed\n   */\n  destroyOnClose: Boolean,\n  /**\n   * @description whether the Dialog can be closed by clicking the mask\n   */\n  closeOnClickModal: {\n    type: Boolean,\n    default: true,\n  },\n  /**\n   * @description whether the Dialog can be closed by pressing ESC\n   */\n  closeOnPressEscape: {\n    type: Boolean,\n    default: true,\n  },\n  /**\n   * @description whether scroll of body is disabled while Dialog is displayed\n   */\n  lockScroll: {\n    type: Boolean,\n    default: true,\n  },\n  /**\n   * @description whether a mask is displayed\n   */\n  modal: {\n    type: Boolean,\n    default: true,\n  },\n  /**\n   * @description the Time(milliseconds) before open\n   */\n  openDelay: {\n    type: Number,\n    default: 0,\n  },\n  /**\n   * @description the Time(milliseconds) before close\n   */\n  closeDelay: {\n    type: Number,\n    default: 0,\n  },\n  /**\n   * @description value for `margin-top` of Dialog CSS, default is 15vh\n   */\n  top: {\n    type: String,\n  },\n  /**\n   * @description visibility of Dialog\n   */\n  modelValue: Boolean,\n  /**\n   * @description custom class names for mask\n   */\n  modalClass: String,\n  /**\n   * @description width of Dialog, default is 50%\n   */\n  width: {\n    type: [String, Number],\n  },\n  /**\n   * @description same as z-index in native CSS, z-order of dialog\n   */\n  zIndex: {\n    type: Number,\n  },\n  trapFocus: {\n    type: Boolean,\n    default: false,\n  },\n  /**\n   * @description header's aria-level attribute\n   */\n  headerAriaLevel: {\n    type: String,\n    default: '2',\n  },\n} as const)\n\nexport type DialogProps = ExtractPropTypes<typeof dialogProps>\n\nexport const dialogEmits = {\n  open: () => true,\n  opened: () => true,\n  close: () => true,\n  closed: () => true,\n  [UPDATE_MODEL_EVENT]: (value: boolean) => isBoolean(value),\n  openAutoFocus: () => true,\n  closeAutoFocus: () => true,\n}\nexport type DialogEmits = typeof dialogEmits\n"],"mappings":";;;;;;AAGY,MAACA,WAAW,GAAGC,UAAU,CAAC;EACpC,GAAGC,kBAAkB;EACrBC,YAAY,EAAEC,OAAO;EACrBC,WAAW,EAAE;IACXC,IAAI,EAAEC,cAAc,CAACC,QAAQ;EACjC,CAAG;EACDC,cAAc,EAAEL,OAAO;EACvBM,iBAAiB,EAAE;IACjBJ,IAAI,EAAEF,OAAO;IACbO,OAAO,EAAE;EACb,CAAG;EACDC,kBAAkB,EAAE;IAClBN,IAAI,EAAEF,OAAO;IACbO,OAAO,EAAE;EACb,CAAG;EACDE,UAAU,EAAE;IACVP,IAAI,EAAEF,OAAO;IACbO,OAAO,EAAE;EACb,CAAG;EACDG,KAAK,EAAE;IACLR,IAAI,EAAEF,OAAO;IACbO,OAAO,EAAE;EACb,CAAG;EACDI,SAAS,EAAE;IACTT,IAAI,EAAEU,MAAM;IACZL,OAAO,EAAE;EACb,CAAG;EACDM,UAAU,EAAE;IACVX,IAAI,EAAEU,MAAM;IACZL,OAAO,EAAE;EACb,CAAG;EACDO,GAAG,EAAE;IACHZ,IAAI,EAAEa;EACV,CAAG;EACDC,UAAU,EAAEhB,OAAO;EACnBiB,UAAU,EAAEF,MAAM;EAClBG,KAAK,EAAE;IACLhB,IAAI,EAAE,CAACa,MAAM,EAAEH,MAAM;EACzB,CAAG;EACDO,MAAM,EAAE;IACNjB,IAAI,EAAEU;EACV,CAAG;EACDQ,SAAS,EAAE;IACTlB,IAAI,EAAEF,OAAO;IACbO,OAAO,EAAE;EACb,CAAG;EACDc,eAAe,EAAE;IACfnB,IAAI,EAAEa,MAAM;IACZR,OAAO,EAAE;EACb;AACA,CAAC;AACW,MAACe,WAAW,GAAG;EACzBC,IAAI,EAAEA,CAAA,KAAM,IAAI;EAChBC,MAAM,EAAEA,CAAA,KAAM,IAAI;EAClBC,KAAK,EAAEA,CAAA,KAAM,IAAI;EACjBC,MAAM,EAAEA,CAAA,KAAM,IAAI;EAClB,CAACC,kBAAkB,GAAIC,KAAK,IAAKC,SAAS,CAACD,KAAK,CAAC;EACjDE,aAAa,EAAEA,CAAA,KAAM,IAAI;EACzBC,cAAc,EAAEA,CAAA,KAAM;AACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}