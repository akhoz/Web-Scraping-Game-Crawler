{"ast":null,"code":"import { defineComponent, ref, reactive, computed, nextTick, onMounted, watch, provide, openBlock, createBlock, unref, withCtx, withDirectives, createElementBlock, withKeys, createElementVNode, normalizeClass, createVNode, createCommentVNode, createTextVNode, toDisplayString, normalizeStyle, vShow } from 'vue';\nimport { debounce } from 'lodash-unified';\nimport { ElButton } from '../../button/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../directives/index.mjs';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport '../../form/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../constants/index.mjs';\nimport '../../../utils/index.mjs';\nimport { ArrowDown, Close } from '@element-plus/icons-vue';\nimport AlphaSlider from './components/alpha-slider.mjs';\nimport HueSlider from './components/hue-slider.mjs';\nimport Predefine from './components/predefine.mjs';\nimport SvPanel from './components/sv-panel.mjs';\nimport Color from './utils/color.mjs';\nimport { colorPickerProps, colorPickerEmits, colorPickerContextKey } from './color-picker.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useFormItem, useFormItemInputId } from '../../form/src/hooks/use-form-item.mjs';\nimport { useFormSize, useFormDisabled } from '../../form/src/hooks/use-form-common-props.mjs';\nimport { useFocusController } from '../../../hooks/use-focus-controller/index.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport ClickOutside from '../../../directives/click-outside/index.mjs';\nconst _hoisted_1 = [\"onKeydown\"];\nconst _hoisted_2 = [\"id\", \"aria-label\", \"aria-labelledby\", \"aria-description\", \"aria-disabled\", \"tabindex\"];\nconst __default__ = defineComponent({\n  name: \"ElColorPicker\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: colorPickerProps,\n  emits: colorPickerEmits,\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"color\");\n    const {\n      formItem\n    } = useFormItem();\n    const colorSize = useFormSize();\n    const colorDisabled = useFormDisabled();\n    const {\n      inputId: buttonId,\n      isLabeledByFormItem\n    } = useFormItemInputId(props, {\n      formItemContext: formItem\n    });\n    const hue = ref();\n    const sv = ref();\n    const alpha = ref();\n    const popper = ref();\n    const triggerRef = ref();\n    const inputRef = ref();\n    const {\n      isFocused,\n      handleFocus: _handleFocus,\n      handleBlur\n    } = useFocusController(triggerRef, {\n      beforeBlur(event) {\n        var _a;\n        return (_a = popper.value) == null ? void 0 : _a.isFocusInsideContent(event);\n      },\n      afterBlur() {\n        setShowPicker(false);\n        resetColor();\n      }\n    });\n    const handleFocus = event => {\n      if (colorDisabled.value) return blur();\n      _handleFocus(event);\n    };\n    let shouldActiveChange = true;\n    const color = reactive(new Color({\n      enableAlpha: props.showAlpha,\n      format: props.colorFormat || \"\",\n      value: props.modelValue\n    }));\n    const showPicker = ref(false);\n    const showPanelColor = ref(false);\n    const customInput = ref(\"\");\n    const displayedColor = computed(() => {\n      if (!props.modelValue && !showPanelColor.value) {\n        return \"transparent\";\n      }\n      return displayedRgb(color, props.showAlpha);\n    });\n    const currentColor = computed(() => {\n      return !props.modelValue && !showPanelColor.value ? \"\" : color.value;\n    });\n    const buttonAriaLabel = computed(() => {\n      return !isLabeledByFormItem.value ? props.label || t(\"el.colorpicker.defaultLabel\") : void 0;\n    });\n    const buttonAriaLabelledby = computed(() => {\n      return isLabeledByFormItem.value ? formItem == null ? void 0 : formItem.labelId : void 0;\n    });\n    const btnKls = computed(() => {\n      return [ns.b(\"picker\"), ns.is(\"disabled\", colorDisabled.value), ns.bm(\"picker\", colorSize.value), ns.is(\"focused\", isFocused.value)];\n    });\n    function displayedRgb(color2, showAlpha) {\n      if (!(color2 instanceof Color)) {\n        throw new TypeError(\"color should be instance of _color Class\");\n      }\n      const {\n        r,\n        g,\n        b\n      } = color2.toRgb();\n      return showAlpha ? `rgba(${r}, ${g}, ${b}, ${color2.get(\"alpha\") / 100})` : `rgb(${r}, ${g}, ${b})`;\n    }\n    function setShowPicker(value) {\n      showPicker.value = value;\n    }\n    const debounceSetShowPicker = debounce(setShowPicker, 100, {\n      leading: true\n    });\n    function show() {\n      if (colorDisabled.value) return;\n      setShowPicker(true);\n    }\n    function hide() {\n      debounceSetShowPicker(false);\n      resetColor();\n    }\n    function resetColor() {\n      nextTick(() => {\n        if (props.modelValue) {\n          color.fromString(props.modelValue);\n        } else {\n          color.value = \"\";\n          nextTick(() => {\n            showPanelColor.value = false;\n          });\n        }\n      });\n    }\n    function handleTrigger() {\n      if (colorDisabled.value) return;\n      debounceSetShowPicker(!showPicker.value);\n    }\n    function handleConfirm() {\n      color.fromString(customInput.value);\n    }\n    function confirmValue() {\n      const value = color.value;\n      emit(UPDATE_MODEL_EVENT, value);\n      emit(\"change\", value);\n      if (props.validateEvent) {\n        formItem == null ? void 0 : formItem.validate(\"change\").catch(err => debugWarn(err));\n      }\n      debounceSetShowPicker(false);\n      nextTick(() => {\n        const newColor = new Color({\n          enableAlpha: props.showAlpha,\n          format: props.colorFormat || \"\",\n          value: props.modelValue\n        });\n        if (!color.compare(newColor)) {\n          resetColor();\n        }\n      });\n    }\n    function clear() {\n      debounceSetShowPicker(false);\n      emit(UPDATE_MODEL_EVENT, null);\n      emit(\"change\", null);\n      if (props.modelValue !== null && props.validateEvent) {\n        formItem == null ? void 0 : formItem.validate(\"change\").catch(err => debugWarn(err));\n      }\n      resetColor();\n    }\n    function handleClickOutside(event) {\n      if (!showPicker.value) return;\n      hide();\n      if (isFocused.value) {\n        const _event = new FocusEvent(\"focus\", event);\n        handleBlur(_event);\n      }\n    }\n    function handleEsc(event) {\n      event.preventDefault();\n      event.stopPropagation();\n      setShowPicker(false);\n      resetColor();\n    }\n    function handleKeyDown(event) {\n      switch (event.code) {\n        case EVENT_CODE.enter:\n        case EVENT_CODE.space:\n          event.preventDefault();\n          event.stopPropagation();\n          show();\n          inputRef.value.focus();\n          break;\n        case EVENT_CODE.esc:\n          handleEsc(event);\n          break;\n      }\n    }\n    function focus() {\n      triggerRef.value.focus();\n    }\n    function blur() {\n      triggerRef.value.blur();\n    }\n    onMounted(() => {\n      if (props.modelValue) {\n        customInput.value = currentColor.value;\n      }\n    });\n    watch(() => props.modelValue, newVal => {\n      if (!newVal) {\n        showPanelColor.value = false;\n      } else if (newVal && newVal !== color.value) {\n        shouldActiveChange = false;\n        color.fromString(newVal);\n      }\n    });\n    watch(() => currentColor.value, val => {\n      customInput.value = val;\n      shouldActiveChange && emit(\"activeChange\", val);\n      shouldActiveChange = true;\n    });\n    watch(() => color.value, () => {\n      if (!props.modelValue && !showPanelColor.value) {\n        showPanelColor.value = true;\n      }\n    });\n    watch(() => showPicker.value, () => {\n      nextTick(() => {\n        var _a, _b, _c;\n        (_a = hue.value) == null ? void 0 : _a.update();\n        (_b = sv.value) == null ? void 0 : _b.update();\n        (_c = alpha.value) == null ? void 0 : _c.update();\n      });\n    });\n    provide(colorPickerContextKey, {\n      currentColor\n    });\n    expose({\n      color,\n      show,\n      hide,\n      focus,\n      blur\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(unref(ElTooltip), {\n        ref_key: \"popper\",\n        ref: popper,\n        visible: showPicker.value,\n        \"show-arrow\": false,\n        \"fallback-placements\": [\"bottom\", \"top\", \"right\", \"left\"],\n        offset: 0,\n        \"gpu-acceleration\": false,\n        \"popper-class\": [unref(ns).be(\"picker\", \"panel\"), unref(ns).b(\"dropdown\"), _ctx.popperClass],\n        \"stop-popper-mouse-event\": false,\n        effect: \"light\",\n        trigger: \"click\",\n        transition: `${unref(ns).namespace.value}-zoom-in-top`,\n        persistent: \"\",\n        onHide: _cache[2] || (_cache[2] = $event => setShowPicker(false))\n      }, {\n        content: withCtx(() => [withDirectives((openBlock(), createElementBlock(\"div\", {\n          onKeydown: withKeys(handleEsc, [\"esc\"])\n        }, [createElementVNode(\"div\", {\n          class: normalizeClass(unref(ns).be(\"dropdown\", \"main-wrapper\"))\n        }, [createVNode(HueSlider, {\n          ref_key: \"hue\",\n          ref: hue,\n          class: \"hue-slider\",\n          color: unref(color),\n          vertical: \"\"\n        }, null, 8, [\"color\"]), createVNode(SvPanel, {\n          ref_key: \"sv\",\n          ref: sv,\n          color: unref(color)\n        }, null, 8, [\"color\"])], 2), _ctx.showAlpha ? (openBlock(), createBlock(AlphaSlider, {\n          key: 0,\n          ref_key: \"alpha\",\n          ref: alpha,\n          color: unref(color)\n        }, null, 8, [\"color\"])) : createCommentVNode(\"v-if\", true), _ctx.predefine ? (openBlock(), createBlock(Predefine, {\n          key: 1,\n          ref: \"predefine\",\n          color: unref(color),\n          colors: _ctx.predefine\n        }, null, 8, [\"color\", \"colors\"])) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n          class: normalizeClass(unref(ns).be(\"dropdown\", \"btns\"))\n        }, [createElementVNode(\"span\", {\n          class: normalizeClass(unref(ns).be(\"dropdown\", \"value\"))\n        }, [createVNode(unref(ElInput), {\n          ref_key: \"inputRef\",\n          ref: inputRef,\n          modelValue: customInput.value,\n          \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => customInput.value = $event),\n          \"validate-event\": false,\n          size: \"small\",\n          onKeyup: withKeys(handleConfirm, [\"enter\"]),\n          onBlur: handleConfirm\n        }, null, 8, [\"modelValue\", \"onKeyup\"])], 2), createVNode(unref(ElButton), {\n          class: normalizeClass(unref(ns).be(\"dropdown\", \"link-btn\")),\n          text: \"\",\n          size: \"small\",\n          onClick: clear\n        }, {\n          default: withCtx(() => [createTextVNode(toDisplayString(unref(t)(\"el.colorpicker.clear\")), 1)]),\n          _: 1\n        }, 8, [\"class\"]), createVNode(unref(ElButton), {\n          plain: \"\",\n          size: \"small\",\n          class: normalizeClass(unref(ns).be(\"dropdown\", \"btn\")),\n          onClick: confirmValue\n        }, {\n          default: withCtx(() => [createTextVNode(toDisplayString(unref(t)(\"el.colorpicker.confirm\")), 1)]),\n          _: 1\n        }, 8, [\"class\"])], 2)], 40, _hoisted_1)), [[unref(ClickOutside), handleClickOutside]])]),\n        default: withCtx(() => [createElementVNode(\"div\", {\n          id: unref(buttonId),\n          ref_key: \"triggerRef\",\n          ref: triggerRef,\n          class: normalizeClass(unref(btnKls)),\n          role: \"button\",\n          \"aria-label\": unref(buttonAriaLabel),\n          \"aria-labelledby\": unref(buttonAriaLabelledby),\n          \"aria-description\": unref(t)(\"el.colorpicker.description\", {\n            color: _ctx.modelValue || \"\"\n          }),\n          \"aria-disabled\": unref(colorDisabled),\n          tabindex: unref(colorDisabled) ? -1 : _ctx.tabindex,\n          onKeydown: handleKeyDown,\n          onFocus: handleFocus,\n          onBlur: _cache[1] || (_cache[1] = (...args) => unref(handleBlur) && unref(handleBlur)(...args))\n        }, [unref(colorDisabled) ? (openBlock(), createElementBlock(\"div\", {\n          key: 0,\n          class: normalizeClass(unref(ns).be(\"picker\", \"mask\"))\n        }, null, 2)) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n          class: normalizeClass(unref(ns).be(\"picker\", \"trigger\")),\n          onClick: handleTrigger\n        }, [createElementVNode(\"span\", {\n          class: normalizeClass([unref(ns).be(\"picker\", \"color\"), unref(ns).is(\"alpha\", _ctx.showAlpha)])\n        }, [createElementVNode(\"span\", {\n          class: normalizeClass(unref(ns).be(\"picker\", \"color-inner\")),\n          style: normalizeStyle({\n            backgroundColor: unref(displayedColor)\n          })\n        }, [withDirectives(createVNode(unref(ElIcon), {\n          class: normalizeClass([unref(ns).be(\"picker\", \"icon\"), unref(ns).is(\"icon-arrow-down\")])\n        }, {\n          default: withCtx(() => [createVNode(unref(ArrowDown))]),\n          _: 1\n        }, 8, [\"class\"]), [[vShow, _ctx.modelValue || showPanelColor.value]]), withDirectives(createVNode(unref(ElIcon), {\n          class: normalizeClass([unref(ns).be(\"picker\", \"empty\"), unref(ns).is(\"icon-close\")])\n        }, {\n          default: withCtx(() => [createVNode(unref(Close))]),\n          _: 1\n        }, 8, [\"class\"]), [[vShow, !_ctx.modelValue && !showPanelColor.value]])], 6)], 2)], 2)], 42, _hoisted_2)]),\n        _: 1\n      }, 8, [\"visible\", \"popper-class\", \"transition\"]);\n    };\n  }\n});\nvar ColorPicker = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/color-picker/src/color-picker.vue\"]]);\nexport { ColorPicker as default };","map":{"version":3,"names":["name","t","useLocale","ns","useNamespace","formItem","useFormItem","colorSize","useFormSize","colorDisabled","useFormDisabled","inputId","buttonId","isLabeledByFormItem","useFormItemInputId","props","formItemContext","hue","ref","sv","alpha","popper","triggerRef","inputRef","isFocused","handleFocus","_handleFocus","handleBlur","useFocusController","beforeBlur","event","_a","value","isFocusInsideContent","afterBlur","setShowPicker","resetColor","blur","shouldActiveChange","color","reactive","Color","enableAlpha","showAlpha","format","colorFormat","modelValue","showPicker","showPanelColor","customInput","displayedColor","computed","displayedRgb","currentColor","buttonAriaLabel","label","buttonAriaLabelledby","labelId","btnKls","b","is","bm","color2","TypeError","r","g","toRgb","get","debounceSetShowPicker","debounce","leading","show","hide","nextTick","fromString","handleTrigger","handleConfirm","confirmValue","emit","UPDATE_MODEL_EVENT","validateEvent","validate","catch","err","debugWarn","newColor","compare","clear","handleClickOutside","_event","FocusEvent","handleEsc","preventDefault","stopPropagation","handleKeyDown","code","EVENT_CODE","enter","space","focus","esc","onMounted","watch","newVal","val","_b","_c","update","provide","colorPickerContextKey","expose"],"sources":["../../../../../../packages/components/color-picker/src/color-picker.vue"],"sourcesContent":["<template>\n  <el-tooltip\n    ref=\"popper\"\n    :visible=\"showPicker\"\n    :show-arrow=\"false\"\n    :fallback-placements=\"['bottom', 'top', 'right', 'left']\"\n    :offset=\"0\"\n    :gpu-acceleration=\"false\"\n    :popper-class=\"[ns.be('picker', 'panel'), ns.b('dropdown'), popperClass]\"\n    :stop-popper-mouse-event=\"false\"\n    effect=\"light\"\n    trigger=\"click\"\n    :transition=\"`${ns.namespace.value}-zoom-in-top`\"\n    persistent\n    @hide=\"setShowPicker(false)\"\n  >\n    <template #content>\n      <div v-click-outside=\"handleClickOutside\" @keydown.esc=\"handleEsc\">\n        <div :class=\"ns.be('dropdown', 'main-wrapper')\">\n          <hue-slider ref=\"hue\" class=\"hue-slider\" :color=\"color\" vertical />\n          <sv-panel ref=\"sv\" :color=\"color\" />\n        </div>\n        <alpha-slider v-if=\"showAlpha\" ref=\"alpha\" :color=\"color\" />\n        <predefine\n          v-if=\"predefine\"\n          ref=\"predefine\"\n          :color=\"color\"\n          :colors=\"predefine\"\n        />\n        <div :class=\"ns.be('dropdown', 'btns')\">\n          <span :class=\"ns.be('dropdown', 'value')\">\n            <el-input\n              ref=\"inputRef\"\n              v-model=\"customInput\"\n              :validate-event=\"false\"\n              size=\"small\"\n              @keyup.enter=\"handleConfirm\"\n              @blur=\"handleConfirm\"\n            />\n          </span>\n          <el-button\n            :class=\"ns.be('dropdown', 'link-btn')\"\n            text\n            size=\"small\"\n            @click=\"clear\"\n          >\n            {{ t('el.colorpicker.clear') }}\n          </el-button>\n          <el-button\n            plain\n            size=\"small\"\n            :class=\"ns.be('dropdown', 'btn')\"\n            @click=\"confirmValue\"\n          >\n            {{ t('el.colorpicker.confirm') }}\n          </el-button>\n        </div>\n      </div>\n    </template>\n    <template #default>\n      <div\n        :id=\"buttonId\"\n        ref=\"triggerRef\"\n        :class=\"btnKls\"\n        role=\"button\"\n        :aria-label=\"buttonAriaLabel\"\n        :aria-labelledby=\"buttonAriaLabelledby\"\n        :aria-description=\"\n          t('el.colorpicker.description', { color: modelValue || '' })\n        \"\n        :aria-disabled=\"colorDisabled\"\n        :tabindex=\"colorDisabled ? -1 : tabindex\"\n        @keydown=\"handleKeyDown\"\n        @focus=\"handleFocus\"\n        @blur=\"handleBlur\"\n      >\n        <div v-if=\"colorDisabled\" :class=\"ns.be('picker', 'mask')\" />\n        <div :class=\"ns.be('picker', 'trigger')\" @click=\"handleTrigger\">\n          <span :class=\"[ns.be('picker', 'color'), ns.is('alpha', showAlpha)]\">\n            <span\n              :class=\"ns.be('picker', 'color-inner')\"\n              :style=\"{\n                backgroundColor: displayedColor,\n              }\"\n            >\n              <el-icon\n                v-show=\"modelValue || showPanelColor\"\n                :class=\"[ns.be('picker', 'icon'), ns.is('icon-arrow-down')]\"\n              >\n                <arrow-down />\n              </el-icon>\n              <el-icon\n                v-show=\"!modelValue && !showPanelColor\"\n                :class=\"[ns.be('picker', 'empty'), ns.is('icon-close')]\"\n              >\n                <close />\n              </el-icon>\n            </span>\n          </span>\n        </div>\n      </div>\n    </template>\n  </el-tooltip>\n</template>\n\n<script lang=\"ts\" setup>\nimport {\n  computed,\n  nextTick,\n  onMounted,\n  provide,\n  reactive,\n  ref,\n  watch,\n} from 'vue'\nimport { debounce } from 'lodash-unified'\nimport { ElButton } from '@element-plus/components/button'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { ClickOutside as vClickOutside } from '@element-plus/directives'\nimport { ElTooltip } from '@element-plus/components/tooltip'\nimport { ElInput } from '@element-plus/components/input'\nimport {\n  useFormDisabled,\n  useFormItem,\n  useFormItemInputId,\n  useFormSize,\n} from '@element-plus/components/form'\nimport {\n  useFocusController,\n  useLocale,\n  useNamespace,\n} from '@element-plus/hooks'\nimport { EVENT_CODE, UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { debugWarn } from '@element-plus/utils'\nimport { ArrowDown, Close } from '@element-plus/icons-vue'\nimport AlphaSlider from './components/alpha-slider.vue'\nimport HueSlider from './components/hue-slider.vue'\nimport Predefine from './components/predefine.vue'\nimport SvPanel from './components/sv-panel.vue'\nimport Color from './utils/color'\nimport {\n  colorPickerContextKey,\n  colorPickerEmits,\n  colorPickerProps,\n} from './color-picker'\nimport type { TooltipInstance } from '@element-plus/components/tooltip'\n\ndefineOptions({\n  name: 'ElColorPicker',\n})\nconst props = defineProps(colorPickerProps)\nconst emit = defineEmits(colorPickerEmits)\n\nconst { t } = useLocale()\nconst ns = useNamespace('color')\nconst { formItem } = useFormItem()\nconst colorSize = useFormSize()\nconst colorDisabled = useFormDisabled()\n\nconst { inputId: buttonId, isLabeledByFormItem } = useFormItemInputId(props, {\n  formItemContext: formItem,\n})\n\nconst hue = ref<InstanceType<typeof HueSlider>>()\nconst sv = ref<InstanceType<typeof SvPanel>>()\nconst alpha = ref<InstanceType<typeof AlphaSlider>>()\nconst popper = ref<TooltipInstance>()\nconst triggerRef = ref()\nconst inputRef = ref()\n\nconst {\n  isFocused,\n  handleFocus: _handleFocus,\n  handleBlur,\n} = useFocusController(triggerRef, {\n  beforeBlur(event) {\n    return popper.value?.isFocusInsideContent(event)\n  },\n  afterBlur() {\n    setShowPicker(false)\n    resetColor()\n  },\n})\n\nconst handleFocus = (event: FocusEvent) => {\n  if (colorDisabled.value) return blur()\n  _handleFocus(event)\n}\n\n// active-change is used to prevent modelValue changes from triggering.\nlet shouldActiveChange = true\n\nconst color = reactive(\n  new Color({\n    enableAlpha: props.showAlpha,\n    format: props.colorFormat || '',\n    value: props.modelValue,\n  })\n) as Color\n\nconst showPicker = ref(false)\nconst showPanelColor = ref(false)\nconst customInput = ref('')\n\nconst displayedColor = computed(() => {\n  if (!props.modelValue && !showPanelColor.value) {\n    return 'transparent'\n  }\n  return displayedRgb(color, props.showAlpha)\n})\n\nconst currentColor = computed(() => {\n  return !props.modelValue && !showPanelColor.value ? '' : color.value\n})\n\nconst buttonAriaLabel = computed<string | undefined>(() => {\n  return !isLabeledByFormItem.value\n    ? props.label || t('el.colorpicker.defaultLabel')\n    : undefined\n})\n\nconst buttonAriaLabelledby = computed<string | undefined>(() => {\n  return isLabeledByFormItem.value ? formItem?.labelId : undefined\n})\n\nconst btnKls = computed(() => {\n  return [\n    ns.b('picker'),\n    ns.is('disabled', colorDisabled.value),\n    ns.bm('picker', colorSize.value),\n    ns.is('focused', isFocused.value),\n  ]\n})\n\nfunction displayedRgb(color: Color, showAlpha: boolean) {\n  if (!(color instanceof Color)) {\n    throw new TypeError('color should be instance of _color Class')\n  }\n\n  const { r, g, b } = color.toRgb()\n  return showAlpha\n    ? `rgba(${r}, ${g}, ${b}, ${color.get('alpha') / 100})`\n    : `rgb(${r}, ${g}, ${b})`\n}\n\nfunction setShowPicker(value: boolean) {\n  showPicker.value = value\n}\n\nconst debounceSetShowPicker = debounce(setShowPicker, 100, { leading: true })\n\nfunction show() {\n  if (colorDisabled.value) return\n  setShowPicker(true)\n}\n\nfunction hide() {\n  debounceSetShowPicker(false)\n  resetColor()\n}\n\nfunction resetColor() {\n  nextTick(() => {\n    if (props.modelValue) {\n      color.fromString(props.modelValue)\n    } else {\n      color.value = ''\n      nextTick(() => {\n        showPanelColor.value = false\n      })\n    }\n  })\n}\n\nfunction handleTrigger() {\n  if (colorDisabled.value) return\n  debounceSetShowPicker(!showPicker.value)\n}\n\nfunction handleConfirm() {\n  color.fromString(customInput.value)\n}\n\nfunction confirmValue() {\n  const value = color.value\n  emit(UPDATE_MODEL_EVENT, value)\n  emit('change', value)\n  if (props.validateEvent) {\n    formItem?.validate('change').catch((err) => debugWarn(err))\n  }\n  debounceSetShowPicker(false)\n  // check if modelValue change, if not change, then reset color.\n  nextTick(() => {\n    const newColor = new Color({\n      enableAlpha: props.showAlpha,\n      format: props.colorFormat || '',\n      value: props.modelValue,\n    })\n    if (!color.compare(newColor)) {\n      resetColor()\n    }\n  })\n}\n\nfunction clear() {\n  debounceSetShowPicker(false)\n  emit(UPDATE_MODEL_EVENT, null)\n  emit('change', null)\n  if (props.modelValue !== null && props.validateEvent) {\n    formItem?.validate('change').catch((err) => debugWarn(err))\n  }\n  resetColor()\n}\n\nfunction handleClickOutside(event: Event) {\n  if (!showPicker.value) return\n  hide()\n\n  if (isFocused.value) {\n    const _event = new FocusEvent('focus', event)\n    handleBlur(_event)\n  }\n}\n\nfunction handleEsc(event: KeyboardEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n  setShowPicker(false)\n  resetColor()\n}\n\nfunction handleKeyDown(event: KeyboardEvent) {\n  switch (event.code) {\n    case EVENT_CODE.enter:\n    case EVENT_CODE.space:\n      event.preventDefault()\n      event.stopPropagation()\n      show()\n      inputRef.value.focus()\n      break\n    case EVENT_CODE.esc:\n      handleEsc(event)\n      break\n  }\n}\n\nfunction focus() {\n  triggerRef.value.focus()\n}\n\nfunction blur() {\n  triggerRef.value.blur()\n}\n\nonMounted(() => {\n  if (props.modelValue) {\n    customInput.value = currentColor.value\n  }\n})\n\nwatch(\n  () => props.modelValue,\n  (newVal) => {\n    if (!newVal) {\n      showPanelColor.value = false\n    } else if (newVal && newVal !== color.value) {\n      shouldActiveChange = false\n      color.fromString(newVal)\n    }\n  }\n)\n\nwatch(\n  () => currentColor.value,\n  (val) => {\n    customInput.value = val\n    shouldActiveChange && emit('activeChange', val)\n    shouldActiveChange = true\n  }\n)\n\nwatch(\n  () => color.value,\n  () => {\n    if (!props.modelValue && !showPanelColor.value) {\n      showPanelColor.value = true\n    }\n  }\n)\n\nwatch(\n  () => showPicker.value,\n  () => {\n    nextTick(() => {\n      hue.value?.update()\n      sv.value?.update()\n      alpha.value?.update()\n    })\n  }\n)\n\nprovide(colorPickerContextKey, {\n  currentColor,\n})\n\ndefineExpose({\n  /**\n   * @description current color object\n   */\n  color,\n  /**\n   * @description manually show ColorPicker\n   */\n  show,\n  /**\n   * @description manually hide ColorPicker\n   */\n  hide,\n  /**\n   * @description focus the input element\n   */\n  focus,\n  /**\n   * @description blur the input element\n   */\n  blur,\n})\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}