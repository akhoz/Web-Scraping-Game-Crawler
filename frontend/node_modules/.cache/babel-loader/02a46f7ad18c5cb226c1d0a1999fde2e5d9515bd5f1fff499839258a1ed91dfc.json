{"ast":null,"code":"import { getCurrentInstance, shallowRef, ref, watch } from 'vue';\nimport { useEventListener } from '@vueuse/core';\nimport '../../utils/index.mjs';\nimport { isFunction } from '@vue/shared';\nfunction useFocusController(target, {\n  afterFocus,\n  beforeBlur,\n  afterBlur\n} = {}) {\n  const instance = getCurrentInstance();\n  const {\n    emit\n  } = instance;\n  const wrapperRef = shallowRef();\n  const isFocused = ref(false);\n  const handleFocus = event => {\n    if (isFocused.value) return;\n    isFocused.value = true;\n    emit(\"focus\", event);\n    afterFocus == null ? void 0 : afterFocus();\n  };\n  const handleBlur = event => {\n    var _a;\n    const cancelBlur = isFunction(beforeBlur) ? beforeBlur(event) : false;\n    if (cancelBlur || event.relatedTarget && ((_a = wrapperRef.value) == null ? void 0 : _a.contains(event.relatedTarget))) return;\n    isFocused.value = false;\n    emit(\"blur\", event);\n    afterBlur == null ? void 0 : afterBlur();\n  };\n  const handleClick = () => {\n    var _a;\n    (_a = target.value) == null ? void 0 : _a.focus();\n  };\n  watch(wrapperRef, el => {\n    if (el) {\n      el.setAttribute(\"tabindex\", \"-1\");\n    }\n  });\n  useEventListener(wrapperRef, \"click\", handleClick);\n  return {\n    wrapperRef,\n    isFocused,\n    handleFocus,\n    handleBlur\n  };\n}\nexport { useFocusController };","map":{"version":3,"names":["useFocusController","target","afterFocus","beforeBlur","afterBlur","instance","getCurrentInstance","emit","wrapperRef","shallowRef","isFocused","ref","handleFocus","event","value","handleBlur","_a","cancelBlur","isFunction","relatedTarget","contains","handleClick","focus","watch","el","setAttribute","useEventListener"],"sources":["../../../../../packages/hooks/use-focus-controller/index.ts"],"sourcesContent":["import { getCurrentInstance, ref, shallowRef, watch } from 'vue'\nimport { useEventListener } from '@vueuse/core'\nimport { isFunction } from '@element-plus/utils'\nimport type { ShallowRef } from 'vue'\n\ninterface UseFocusControllerOptions {\n  afterFocus?: () => void\n  /**\n   * return true to cancel blur\n   * @param event FocusEvent\n   */\n  beforeBlur?: (event: FocusEvent) => boolean | undefined\n  afterBlur?: () => void\n}\n\nexport function useFocusController<T extends HTMLElement>(\n  target: ShallowRef<T | undefined>,\n  { afterFocus, beforeBlur, afterBlur }: UseFocusControllerOptions = {}\n) {\n  const instance = getCurrentInstance()!\n  const { emit } = instance\n  const wrapperRef = shallowRef<HTMLElement>()\n  const isFocused = ref(false)\n\n  const handleFocus = (event: FocusEvent) => {\n    if (isFocused.value) return\n    isFocused.value = true\n    emit('focus', event)\n    afterFocus?.()\n  }\n\n  const handleBlur = (event: FocusEvent) => {\n    const cancelBlur = isFunction(beforeBlur) ? beforeBlur(event) : false\n    if (\n      cancelBlur ||\n      (event.relatedTarget &&\n        wrapperRef.value?.contains(event.relatedTarget as Node))\n    )\n      return\n\n    isFocused.value = false\n    emit('blur', event)\n    afterBlur?.()\n  }\n\n  const handleClick = () => {\n    target.value?.focus()\n  }\n\n  watch(wrapperRef, (el) => {\n    if (el) {\n      el.setAttribute('tabindex', '-1')\n    }\n  })\n\n  // TODO: using useEventListener will fail the test\n  // useEventListener(target, 'focus', handleFocus)\n  // useEventListener(target, 'blur', handleBlur)\n  useEventListener(wrapperRef, 'click', handleClick)\n\n  return {\n    wrapperRef,\n    isFocused,\n    handleFocus,\n    handleBlur,\n  }\n}\n"],"mappings":";;;;AAGO,SAASA,kBAAkBA,CAACC,MAAM,EAAE;EAAEC,UAAU;EAAEC,UAAU;EAAEC;AAAS,CAAE,GAAG,EAAE,EAAE;EACrF,MAAMC,QAAQ,GAAGC,kBAAkB,EAAE;EACrC,MAAM;IAAEC;EAAI,CAAE,GAAGF,QAAQ;EACzB,MAAMG,UAAU,GAAGC,UAAU,EAAE;EAC/B,MAAMC,SAAS,GAAGC,GAAG,CAAC,KAAK,CAAC;EAC5B,MAAMC,WAAW,GAAIC,KAAK,IAAK;IAC7B,IAAIH,SAAS,CAACI,KAAK,EACjB;IACFJ,SAAS,CAACI,KAAK,GAAG,IAAI;IACtBP,IAAI,CAAC,OAAO,EAAEM,KAAK,CAAC;IACpBX,UAAU,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,UAAU,EAAE;EAC9C,CAAG;EACD,MAAMa,UAAU,GAAIF,KAAK,IAAK;IAC5B,IAAIG,EAAE;IACN,MAAMC,UAAU,GAAGC,UAAU,CAACf,UAAU,CAAC,GAAGA,UAAU,CAACU,KAAK,CAAC,GAAG,KAAK;IACrE,IAAII,UAAU,IAAIJ,KAAK,CAACM,aAAa,KAAK,CAACH,EAAE,GAAGR,UAAU,CAACM,KAAK,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGE,EAAE,CAACI,QAAQ,CAACP,KAAK,CAACM,aAAa,CAAC,CAAC,EACpH;IACFT,SAAS,CAACI,KAAK,GAAG,KAAK;IACvBP,IAAI,CAAC,MAAM,EAAEM,KAAK,CAAC;IACnBT,SAAS,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,SAAS,EAAE;EAC5C,CAAG;EACD,MAAMiB,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAIL,EAAE;IACN,CAACA,EAAE,GAAGf,MAAM,CAACa,KAAK,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGE,EAAE,CAACM,KAAK,EAAE;EACrD,CAAG;EACDC,KAAK,CAACf,UAAU,EAAGgB,EAAE,IAAK;IACxB,IAAIA,EAAE,EAAE;MACNA,EAAE,CAACC,YAAY,CAAC,UAAU,EAAE,IAAI,CAAC;IACvC;EACA,CAAG,CAAC;EACFC,gBAAgB,CAAClB,UAAU,EAAE,OAAO,EAAEa,WAAW,CAAC;EAClD,OAAO;IACLb,UAAU;IACVE,SAAS;IACTE,WAAW;IACXG;EACJ,CAAG;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}