{"ast":null,"code":"import { defineComponent, getCurrentInstance, ref, computed, watch, onBeforeUnmount, unref, provide, toRef, resolveComponent, openBlock, createElementBlock, normalizeClass, createVNode, createSlots, withCtx, renderSlot, createBlock, mergeProps, createCommentVNode } from 'vue';\nimport { ElButton } from '../../button/index.mjs';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport { ElScrollbar } from '../../scrollbar/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../roving-focus-group/index.mjs';\nimport '../../slot/index.mjs';\nimport '../../form/index.mjs';\nimport '../../../utils/index.mjs';\nimport { ArrowDown } from '@element-plus/icons-vue';\nimport '../../../constants/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { ElCollection, dropdownProps } from './dropdown.mjs';\nimport { DROPDOWN_INJECTION_KEY } from './tokens.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport ElRovingFocusGroup from '../../roving-focus-group/src/roving-focus-group2.mjs';\nimport { OnlyChild } from '../../slot/src/only-child.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { addUnit } from '../../../utils/dom/style.mjs';\nimport { castArray } from 'lodash-unified';\nimport { useId } from '../../../hooks/use-id/index.mjs';\nimport { useFormSize } from '../../form/src/hooks/use-form-common-props.mjs';\nconst {\n  ButtonGroup: ElButtonGroup\n} = ElButton;\nconst _sfc_main = defineComponent({\n  name: \"ElDropdown\",\n  components: {\n    ElButton,\n    ElButtonGroup,\n    ElScrollbar,\n    ElDropdownCollection: ElCollection,\n    ElTooltip,\n    ElRovingFocusGroup,\n    ElOnlyChild: OnlyChild,\n    ElIcon,\n    ArrowDown\n  },\n  props: dropdownProps,\n  emits: [\"visible-change\", \"click\", \"command\"],\n  setup(props, {\n    emit\n  }) {\n    const _instance = getCurrentInstance();\n    const ns = useNamespace(\"dropdown\");\n    const {\n      t\n    } = useLocale();\n    const triggeringElementRef = ref();\n    const referenceElementRef = ref();\n    const popperRef = ref(null);\n    const contentRef = ref(null);\n    const scrollbar = ref(null);\n    const currentTabId = ref(null);\n    const isUsingKeyboard = ref(false);\n    const triggerKeys = [EVENT_CODE.enter, EVENT_CODE.space, EVENT_CODE.down];\n    const wrapStyle = computed(() => ({\n      maxHeight: addUnit(props.maxHeight)\n    }));\n    const dropdownTriggerKls = computed(() => [ns.m(dropdownSize.value)]);\n    const trigger = computed(() => castArray(props.trigger));\n    const defaultTriggerId = useId().value;\n    const triggerId = computed(() => {\n      return props.id || defaultTriggerId;\n    });\n    watch([triggeringElementRef, trigger], ([triggeringElement, trigger2], [prevTriggeringElement]) => {\n      var _a, _b, _c;\n      if ((_a = prevTriggeringElement == null ? void 0 : prevTriggeringElement.$el) == null ? void 0 : _a.removeEventListener) {\n        prevTriggeringElement.$el.removeEventListener(\"pointerenter\", onAutofocusTriggerEnter);\n      }\n      if ((_b = triggeringElement == null ? void 0 : triggeringElement.$el) == null ? void 0 : _b.removeEventListener) {\n        triggeringElement.$el.removeEventListener(\"pointerenter\", onAutofocusTriggerEnter);\n      }\n      if (((_c = triggeringElement == null ? void 0 : triggeringElement.$el) == null ? void 0 : _c.addEventListener) && trigger2.includes(\"hover\")) {\n        triggeringElement.$el.addEventListener(\"pointerenter\", onAutofocusTriggerEnter);\n      }\n    }, {\n      immediate: true\n    });\n    onBeforeUnmount(() => {\n      var _a, _b;\n      if ((_b = (_a = triggeringElementRef.value) == null ? void 0 : _a.$el) == null ? void 0 : _b.removeEventListener) {\n        triggeringElementRef.value.$el.removeEventListener(\"pointerenter\", onAutofocusTriggerEnter);\n      }\n    });\n    function handleClick() {\n      handleClose();\n    }\n    function handleClose() {\n      var _a;\n      (_a = popperRef.value) == null ? void 0 : _a.onClose();\n    }\n    function handleOpen() {\n      var _a;\n      (_a = popperRef.value) == null ? void 0 : _a.onOpen();\n    }\n    const dropdownSize = useFormSize();\n    function commandHandler(...args) {\n      emit(\"command\", ...args);\n    }\n    function onAutofocusTriggerEnter() {\n      var _a, _b;\n      (_b = (_a = triggeringElementRef.value) == null ? void 0 : _a.$el) == null ? void 0 : _b.focus();\n    }\n    function onItemEnter() {}\n    function onItemLeave() {\n      const contentEl = unref(contentRef);\n      trigger.value.includes(\"hover\") && (contentEl == null ? void 0 : contentEl.focus());\n      currentTabId.value = null;\n    }\n    function handleCurrentTabIdChange(id) {\n      currentTabId.value = id;\n    }\n    function handleEntryFocus(e) {\n      if (!isUsingKeyboard.value) {\n        e.preventDefault();\n        e.stopImmediatePropagation();\n      }\n    }\n    function handleBeforeShowTooltip() {\n      emit(\"visible-change\", true);\n    }\n    function handleShowTooltip(event) {\n      if ((event == null ? void 0 : event.type) === \"keydown\") {\n        contentRef.value.focus();\n      }\n    }\n    function handleBeforeHideTooltip() {\n      emit(\"visible-change\", false);\n    }\n    provide(DROPDOWN_INJECTION_KEY, {\n      contentRef,\n      role: computed(() => props.role),\n      triggerId,\n      isUsingKeyboard,\n      onItemEnter,\n      onItemLeave\n    });\n    provide(\"elDropdown\", {\n      instance: _instance,\n      dropdownSize,\n      handleClick,\n      commandHandler,\n      trigger: toRef(props, \"trigger\"),\n      hideOnClick: toRef(props, \"hideOnClick\")\n    });\n    const onFocusAfterTrapped = e => {\n      var _a, _b;\n      e.preventDefault();\n      (_b = (_a = contentRef.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a, {\n        preventScroll: true\n      });\n    };\n    const handlerMainButtonClick = event => {\n      emit(\"click\", event);\n    };\n    return {\n      t,\n      ns,\n      scrollbar,\n      wrapStyle,\n      dropdownTriggerKls,\n      dropdownSize,\n      triggerId,\n      triggerKeys,\n      currentTabId,\n      handleCurrentTabIdChange,\n      handlerMainButtonClick,\n      handleEntryFocus,\n      handleClose,\n      handleOpen,\n      handleBeforeShowTooltip,\n      handleShowTooltip,\n      handleBeforeHideTooltip,\n      onFocusAfterTrapped,\n      popperRef,\n      contentRef,\n      triggeringElementRef,\n      referenceElementRef\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _a;\n  const _component_el_dropdown_collection = resolveComponent(\"el-dropdown-collection\");\n  const _component_el_roving_focus_group = resolveComponent(\"el-roving-focus-group\");\n  const _component_el_scrollbar = resolveComponent(\"el-scrollbar\");\n  const _component_el_only_child = resolveComponent(\"el-only-child\");\n  const _component_el_tooltip = resolveComponent(\"el-tooltip\");\n  const _component_el_button = resolveComponent(\"el-button\");\n  const _component_arrow_down = resolveComponent(\"arrow-down\");\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_el_button_group = resolveComponent(\"el-button-group\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([_ctx.ns.b(), _ctx.ns.is(\"disabled\", _ctx.disabled)])\n  }, [createVNode(_component_el_tooltip, {\n    ref: \"popperRef\",\n    role: _ctx.role,\n    effect: _ctx.effect,\n    \"fallback-placements\": [\"bottom\", \"top\"],\n    \"popper-options\": _ctx.popperOptions,\n    \"gpu-acceleration\": false,\n    \"hide-after\": _ctx.trigger === \"hover\" ? _ctx.hideTimeout : 0,\n    \"manual-mode\": true,\n    placement: _ctx.placement,\n    \"popper-class\": [_ctx.ns.e(\"popper\"), _ctx.popperClass],\n    \"reference-element\": (_a = _ctx.referenceElementRef) == null ? void 0 : _a.$el,\n    trigger: _ctx.trigger,\n    \"trigger-keys\": _ctx.triggerKeys,\n    \"trigger-target-el\": _ctx.contentRef,\n    \"show-after\": _ctx.trigger === \"hover\" ? _ctx.showTimeout : 0,\n    \"stop-popper-mouse-event\": false,\n    \"virtual-ref\": _ctx.triggeringElementRef,\n    \"virtual-triggering\": _ctx.splitButton,\n    disabled: _ctx.disabled,\n    transition: `${_ctx.ns.namespace.value}-zoom-in-top`,\n    teleported: _ctx.teleported,\n    pure: \"\",\n    persistent: \"\",\n    onBeforeShow: _ctx.handleBeforeShowTooltip,\n    onShow: _ctx.handleShowTooltip,\n    onBeforeHide: _ctx.handleBeforeHideTooltip\n  }, createSlots({\n    content: withCtx(() => [createVNode(_component_el_scrollbar, {\n      ref: \"scrollbar\",\n      \"wrap-style\": _ctx.wrapStyle,\n      tag: \"div\",\n      \"view-class\": _ctx.ns.e(\"list\")\n    }, {\n      default: withCtx(() => [createVNode(_component_el_roving_focus_group, {\n        loop: _ctx.loop,\n        \"current-tab-id\": _ctx.currentTabId,\n        orientation: \"horizontal\",\n        onCurrentTabIdChange: _ctx.handleCurrentTabIdChange,\n        onEntryFocus: _ctx.handleEntryFocus\n      }, {\n        default: withCtx(() => [createVNode(_component_el_dropdown_collection, null, {\n          default: withCtx(() => [renderSlot(_ctx.$slots, \"dropdown\")]),\n          _: 3\n        })]),\n        _: 3\n      }, 8, [\"loop\", \"current-tab-id\", \"onCurrentTabIdChange\", \"onEntryFocus\"])]),\n      _: 3\n    }, 8, [\"wrap-style\", \"view-class\"])]),\n    _: 2\n  }, [!_ctx.splitButton ? {\n    name: \"default\",\n    fn: withCtx(() => [createVNode(_component_el_only_child, {\n      id: _ctx.triggerId,\n      ref: \"triggeringElementRef\",\n      role: \"button\",\n      tabindex: _ctx.tabindex\n    }, {\n      default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n      _: 3\n    }, 8, [\"id\", \"tabindex\"])])\n  } : void 0]), 1032, [\"role\", \"effect\", \"popper-options\", \"hide-after\", \"placement\", \"popper-class\", \"reference-element\", \"trigger\", \"trigger-keys\", \"trigger-target-el\", \"show-after\", \"virtual-ref\", \"virtual-triggering\", \"disabled\", \"transition\", \"teleported\", \"onBeforeShow\", \"onShow\", \"onBeforeHide\"]), _ctx.splitButton ? (openBlock(), createBlock(_component_el_button_group, {\n    key: 0\n  }, {\n    default: withCtx(() => [createVNode(_component_el_button, mergeProps({\n      ref: \"referenceElementRef\"\n    }, _ctx.buttonProps, {\n      size: _ctx.dropdownSize,\n      type: _ctx.type,\n      disabled: _ctx.disabled,\n      tabindex: _ctx.tabindex,\n      onClick: _ctx.handlerMainButtonClick\n    }), {\n      default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n      _: 3\n    }, 16, [\"size\", \"type\", \"disabled\", \"tabindex\", \"onClick\"]), createVNode(_component_el_button, mergeProps({\n      id: _ctx.triggerId,\n      ref: \"triggeringElementRef\"\n    }, _ctx.buttonProps, {\n      role: \"button\",\n      size: _ctx.dropdownSize,\n      type: _ctx.type,\n      class: _ctx.ns.e(\"caret-button\"),\n      disabled: _ctx.disabled,\n      tabindex: _ctx.tabindex,\n      \"aria-label\": _ctx.t(\"el.dropdown.toggleDropdown\")\n    }), {\n      default: withCtx(() => [createVNode(_component_el_icon, {\n        class: normalizeClass(_ctx.ns.e(\"icon\"))\n      }, {\n        default: withCtx(() => [createVNode(_component_arrow_down)]),\n        _: 1\n      }, 8, [\"class\"])]),\n      _: 1\n    }, 16, [\"id\", \"size\", \"type\", \"class\", \"disabled\", \"tabindex\", \"aria-label\"])]),\n    _: 3\n  })) : createCommentVNode(\"v-if\", true)], 2);\n}\nvar Dropdown = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/dropdown/src/dropdown.vue\"]]);\nexport { Dropdown as default };","map":{"version":3,"names":["ButtonGroup","ElButtonGroup","ElButton","_sfc_main","defineComponent","name","components","ElScrollbar","ElDropdownCollection","ElCollection","ElTooltip","ElRovingFocusGroup","ElOnlyChild","OnlyChild","ElIcon","ArrowDown","props","dropdownProps","emits","setup","emit","_instance","getCurrentInstance","ns","useNamespace","t","useLocale","triggeringElementRef","ref","referenceElementRef","popperRef","contentRef","scrollbar","currentTabId","isUsingKeyboard","triggerKeys","EVENT_CODE","enter","space","down","wrapStyle","computed","maxHeight","addUnit","dropdownTriggerKls","m","dropdownSize","value","trigger","castArray","defaultTriggerId","useId","triggerId","id","watch","triggeringElement","trigger2","prevTriggeringElement","_a","_b","_c","$el","removeEventListener","onAutofocusTriggerEnter","addEventListener","includes","immediate","onBeforeUnmount","handleClick","handleClose","onClose","handleOpen","onOpen","useFormSize","commandHandler","args","focus","onItemEnter","onItemLeave","contentEl","unref","handleCurrentTabIdChange","handleEntryFocus","e","preventDefault","stopImmediatePropagation","handleBeforeShowTooltip","handleShowTooltip","event","type","handleBeforeHideTooltip","provide","DROPDOWN_INJECTION_KEY","role","instance","toRef","hideOnClick","onFocusAfterTrapped","call","preventScroll","handlerMainButtonClick","resolveComponent","_component_el_only_child","_component_el_tooltip","_component_el_button","_component_arrow_down","_component_el_icon","_component_el_button_group","openBlock","createElementBlock","class","normalizeClass","_ctx","b","is","disabled","createVNode","effect","popperOptions","hideTimeout","placement","popperClass","showTimeout","splitButton","transition","namespace","teleported","pure","persistent","onBeforeShow","onShow","onBeforeHide","createSlots","_component_el_scrollbar","tag","default","withCtx","loop","orientation","onCurrentTabIdChange","_","renderSlot","$slots","createBlock","key","mergeProps","buttonProps","size","onClick"],"sources":["../../../../../../packages/components/dropdown/src/dropdown.vue"],"sourcesContent":["<template>\n  <div :class=\"[ns.b(), ns.is('disabled', disabled)]\">\n    <el-tooltip\n      ref=\"popperRef\"\n      :role=\"role\"\n      :effect=\"effect\"\n      :fallback-placements=\"['bottom', 'top']\"\n      :popper-options=\"popperOptions\"\n      :gpu-acceleration=\"false\"\n      :hide-after=\"trigger === 'hover' ? hideTimeout : 0\"\n      :manual-mode=\"true\"\n      :placement=\"placement\"\n      :popper-class=\"[ns.e('popper'), popperClass]\"\n      :reference-element=\"referenceElementRef?.$el\"\n      :trigger=\"trigger\"\n      :trigger-keys=\"triggerKeys\"\n      :trigger-target-el=\"contentRef\"\n      :show-after=\"trigger === 'hover' ? showTimeout : 0\"\n      :stop-popper-mouse-event=\"false\"\n      :virtual-ref=\"triggeringElementRef\"\n      :virtual-triggering=\"splitButton\"\n      :disabled=\"disabled\"\n      :transition=\"`${ns.namespace.value}-zoom-in-top`\"\n      :teleported=\"teleported\"\n      pure\n      persistent\n      @before-show=\"handleBeforeShowTooltip\"\n      @show=\"handleShowTooltip\"\n      @before-hide=\"handleBeforeHideTooltip\"\n    >\n      <template #content>\n        <el-scrollbar\n          ref=\"scrollbar\"\n          :wrap-style=\"wrapStyle\"\n          tag=\"div\"\n          :view-class=\"ns.e('list')\"\n        >\n          <el-roving-focus-group\n            :loop=\"loop\"\n            :current-tab-id=\"currentTabId\"\n            orientation=\"horizontal\"\n            @current-tab-id-change=\"handleCurrentTabIdChange\"\n            @entry-focus=\"handleEntryFocus\"\n          >\n            <el-dropdown-collection>\n              <slot name=\"dropdown\" />\n            </el-dropdown-collection>\n          </el-roving-focus-group>\n        </el-scrollbar>\n      </template>\n      <template v-if=\"!splitButton\" #default>\n        <el-only-child\n          :id=\"triggerId\"\n          ref=\"triggeringElementRef\"\n          role=\"button\"\n          :tabindex=\"tabindex\"\n        >\n          <slot name=\"default\" />\n        </el-only-child>\n      </template>\n    </el-tooltip>\n    <template v-if=\"splitButton\">\n      <el-button-group>\n        <el-button\n          ref=\"referenceElementRef\"\n          v-bind=\"buttonProps\"\n          :size=\"dropdownSize\"\n          :type=\"type\"\n          :disabled=\"disabled\"\n          :tabindex=\"tabindex\"\n          @click=\"handlerMainButtonClick\"\n        >\n          <slot name=\"default\" />\n        </el-button>\n        <el-button\n          :id=\"triggerId\"\n          ref=\"triggeringElementRef\"\n          v-bind=\"buttonProps\"\n          role=\"button\"\n          :size=\"dropdownSize\"\n          :type=\"type\"\n          :class=\"ns.e('caret-button')\"\n          :disabled=\"disabled\"\n          :tabindex=\"tabindex\"\n          :aria-label=\"t('el.dropdown.toggleDropdown')\"\n        >\n          <el-icon :class=\"ns.e('icon')\"><arrow-down /></el-icon>\n        </el-button>\n      </el-button-group>\n    </template>\n  </div>\n</template>\n<script lang=\"ts\">\n// @ts-nocheck\nimport {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  onBeforeUnmount,\n  provide,\n  ref,\n  toRef,\n  unref,\n  watch,\n} from 'vue'\nimport ElButton from '@element-plus/components/button'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElIcon from '@element-plus/components/icon'\nimport ElRovingFocusGroup from '@element-plus/components/roving-focus-group'\nimport { ElOnlyChild } from '@element-plus/components/slot'\nimport { useFormSize } from '@element-plus/components/form'\nimport { addUnit, ensureArray } from '@element-plus/utils'\nimport { ArrowDown } from '@element-plus/icons-vue'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport { useId, useLocale, useNamespace } from '@element-plus/hooks'\nimport { ElCollection as ElDropdownCollection, dropdownProps } from './dropdown'\nimport { DROPDOWN_INJECTION_KEY } from './tokens'\n\nimport type { CSSProperties } from 'vue'\n\nconst { ButtonGroup: ElButtonGroup } = ElButton\n\nexport default defineComponent({\n  name: 'ElDropdown',\n  components: {\n    ElButton,\n    ElButtonGroup,\n    ElScrollbar,\n    ElDropdownCollection,\n    ElTooltip,\n    ElRovingFocusGroup,\n    ElOnlyChild,\n    ElIcon,\n    ArrowDown,\n  },\n  props: dropdownProps,\n  emits: ['visible-change', 'click', 'command'],\n  setup(props, { emit }) {\n    const _instance = getCurrentInstance()\n    const ns = useNamespace('dropdown')\n    const { t } = useLocale()\n\n    const triggeringElementRef = ref()\n    const referenceElementRef = ref()\n    const popperRef = ref<InstanceType<typeof ElTooltip> | null>(null)\n    const contentRef = ref<HTMLElement | null>(null)\n    const scrollbar = ref(null)\n    const currentTabId = ref<string | null>(null)\n    const isUsingKeyboard = ref(false)\n    const triggerKeys = [EVENT_CODE.enter, EVENT_CODE.space, EVENT_CODE.down]\n\n    const wrapStyle = computed<CSSProperties>(() => ({\n      maxHeight: addUnit(props.maxHeight),\n    }))\n    const dropdownTriggerKls = computed(() => [ns.m(dropdownSize.value)])\n    const trigger = computed(() => ensureArray(props.trigger))\n\n    const defaultTriggerId = useId().value\n    const triggerId = computed<string>(() => {\n      return props.id || defaultTriggerId\n    })\n\n    // The goal of this code is to focus on the tooltip triggering element when it is hovered.\n    // This is a temporary fix for where closing the dropdown through pointerleave event focuses on a\n    // completely different element. For a permanent solution, remove all calls to any \"element.focus()\"\n    // that are triggered through pointer enter/leave events.\n    watch(\n      [triggeringElementRef, trigger],\n      ([triggeringElement, trigger], [prevTriggeringElement]) => {\n        if (prevTriggeringElement?.$el?.removeEventListener) {\n          prevTriggeringElement.$el.removeEventListener(\n            'pointerenter',\n            onAutofocusTriggerEnter\n          )\n        }\n        if (triggeringElement?.$el?.removeEventListener) {\n          triggeringElement.$el.removeEventListener(\n            'pointerenter',\n            onAutofocusTriggerEnter\n          )\n        }\n        if (\n          triggeringElement?.$el?.addEventListener &&\n          trigger.includes('hover')\n        ) {\n          triggeringElement.$el.addEventListener(\n            'pointerenter',\n            onAutofocusTriggerEnter\n          )\n        }\n      },\n      { immediate: true }\n    )\n\n    onBeforeUnmount(() => {\n      if (triggeringElementRef.value?.$el?.removeEventListener) {\n        triggeringElementRef.value.$el.removeEventListener(\n          'pointerenter',\n          onAutofocusTriggerEnter\n        )\n      }\n    })\n\n    function handleClick() {\n      handleClose()\n    }\n\n    function handleClose() {\n      popperRef.value?.onClose()\n    }\n\n    function handleOpen() {\n      popperRef.value?.onOpen()\n    }\n\n    const dropdownSize = useFormSize()\n\n    function commandHandler(...args: any[]) {\n      emit('command', ...args)\n    }\n\n    function onAutofocusTriggerEnter() {\n      triggeringElementRef.value?.$el?.focus()\n    }\n\n    function onItemEnter() {\n      // NOOP for now\n    }\n\n    function onItemLeave() {\n      const contentEl = unref(contentRef)\n\n      trigger.value.includes('hover') && contentEl?.focus()\n      currentTabId.value = null\n    }\n\n    function handleCurrentTabIdChange(id: string) {\n      currentTabId.value = id\n    }\n\n    function handleEntryFocus(e: Event) {\n      if (!isUsingKeyboard.value) {\n        e.preventDefault()\n        e.stopImmediatePropagation()\n      }\n    }\n\n    function handleBeforeShowTooltip() {\n      emit('visible-change', true)\n    }\n\n    function handleShowTooltip(event?: Event) {\n      if (event?.type === 'keydown') {\n        contentRef.value.focus()\n      }\n    }\n\n    function handleBeforeHideTooltip() {\n      emit('visible-change', false)\n    }\n\n    provide(DROPDOWN_INJECTION_KEY, {\n      contentRef,\n      role: computed(() => props.role),\n      triggerId,\n      isUsingKeyboard,\n      onItemEnter,\n      onItemLeave,\n    })\n\n    provide('elDropdown', {\n      instance: _instance,\n      dropdownSize,\n      handleClick,\n      commandHandler,\n      trigger: toRef(props, 'trigger'),\n      hideOnClick: toRef(props, 'hideOnClick'),\n    })\n\n    const onFocusAfterTrapped = (e: Event) => {\n      e.preventDefault()\n      contentRef.value?.focus?.({\n        preventScroll: true,\n      })\n    }\n\n    const handlerMainButtonClick = (event: MouseEvent) => {\n      emit('click', event)\n    }\n\n    return {\n      t,\n      ns,\n      scrollbar,\n      wrapStyle,\n      dropdownTriggerKls,\n      dropdownSize,\n      triggerId,\n      triggerKeys,\n      currentTabId,\n      handleCurrentTabIdChange,\n      handlerMainButtonClick,\n      handleEntryFocus,\n      handleClose,\n      handleOpen,\n      handleBeforeShowTooltip,\n      handleShowTooltip,\n      handleBeforeHideTooltip,\n      onFocusAfterTrapped,\n      popperRef,\n      contentRef,\n      triggeringElementRef,\n      referenceElementRef,\n    }\n  },\n})\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}